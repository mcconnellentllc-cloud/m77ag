const express = require('express');
const mongoose = require('mongoose');
const path = require('path');
const cors = require('cors');
const dotenv = require('dotenv');
const bcrypt = require('bcrypt');

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors());

// Database Connection
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/m77ag';

mongoose.connect(MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {
  console.log('MongoDB connected successfully');
  createUsers(); // Create admin and demo users if they don't exist
})
.catch(err => {
  console.error('MongoDB connection error:', err);
  process.exit(1);
});

// Create admin user and demo user if they don't exist
async function createUsers() {
  try {
    const User = require('./models/user');
    
    // Check if admin exists
    const adminExists = await User.findOne({ email: 'admin@m77ag.com' });
    
    // If admin doesn't exist, create one
    if (!adminExists) {
      console.log('Creating admin user...');
      
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash('M77admin2024!', salt);
      
      const adminUser = new User({
        name: 'M77 Admin',
        email: 'admin@m77ag.com',
        password: hashedPassword,
        company: 'M77 AG',
        isAdmin: true
      });
      
      await adminUser.save();
      console.log('Admin user created successfully');
    } else {
      console.log('Admin user already exists');
    }
    
    // Check if demo user exists
    const demoExists = await User.findOne({ email: 'demo@m77ag.com' });
    
    // If demo user doesn't exist, create one
    if (!demoExists) {
      console.log('Creating demo user...');
      
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash('password123', salt);
      
      const demoUser = new User({
        name: 'Demo User',
        email: 'demo@m77ag.com',
        password: hashedPassword,
        company: 'Demo Company',
        isAdmin: false
      });
      
      await demoUser.save();
      console.log('Demo user created successfully');
    } else {
      console.log('Demo user already exists');
    }
  } catch (err) {
    console.error('Error creating users:', err);
  }
}

// API Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/proposals', require('./routes/api'));
// Add more routes as needed (admin, chemicals, etc.)

// Serve static assets from the 'docs' directory for public files
app.use(express.static(path.join(__dirname, '../docs')));

// Admin dashboard route handler - serve dashboard.html for all admin/* paths
app.get('/admin/*', (req, res) => {
  res.sendFile(path.join(__dirname, '../docs/admin/index.html'));
});

// Account dashboard route handler - serve dashboard.html for all account/* paths
app.get('/account/*', (req, res) => {
  res.sendFile(path.join(__dirname, '../docs/account/index.html'));
});

// Serve index.html for all other routes (Client-side routing)
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../docs/index.html'));
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});